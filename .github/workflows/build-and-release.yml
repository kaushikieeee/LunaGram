name: Build and Release LunaGram

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build app
      run: npm run build
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Create DMGs and ZIPs
      run: |
        echo "Creating DMGs, ZIPs, and standalone .app files from built apps..."
        
        # More aggressive cleanup of any mounted volumes
        echo "Cleaning up any existing mounts..."
        sudo diskutil list | grep "LunaGram" | awk '{print $6}' | xargs -I {} sudo diskutil unmount {} 2>/dev/null || true
        hdiutil info 2>/dev/null | grep "/dev/disk" | awk '{print $1}' | xargs -I {} sudo hdiutil detach {} -force 2>/dev/null || true
        sleep 2
        
        # Create DMGs, ZIPs, and .app files for each architecture
        for mac_dir in dist/mac*; do
          if [ -d "$mac_dir" ]; then
            echo "Processing directory: $mac_dir"
            app_path="$mac_dir/LunaGram.app"
            
            if [ -d "$app_path" ]; then
              echo "Found app at: $app_path"
              
              # Determine architecture suffix
              if [[ "$mac_dir" == *"arm64"* ]]; then
                arch_suffix="-arm64"
              else
                arch_suffix=""
              fi
              
              # Create standalone .app file (just copy and rename)
              app_name="LunaGram-1.0.0${arch_suffix}.app"
              echo "Creating standalone $app_name..."
              cp -R "$app_path" "dist/$app_name"
              if [ -d "dist/$app_name" ]; then
                echo "✅ Created standalone $app_name"
              fi
              
              # Create ZIP first (more reliable)
              zip_name="LunaGram-1.0.0${arch_suffix}-mac.zip"
              echo "Creating $zip_name..."
              (cd "$mac_dir" && zip -r "../$zip_name" "LunaGram.app")
              
              if [ -f "dist/$zip_name" ]; then
                echo "✅ Created $zip_name"
              else
                echo "❌ Failed to create $zip_name"
              fi
              
              # Create DMG with multiple fallback methods
              dmg_name="LunaGram-1.0.0${arch_suffix}.dmg"
              echo "Creating $dmg_name..."
              
              # Method 1: Traditional approach with temp directory
              temp_dir=$(mktemp -d)
              cp -R "$app_path" "$temp_dir/"
              ln -s /Applications "$temp_dir/Applications"
              
              # Try creating DMG with different approaches
              dmg_created=false
              
              # Try method 1: Standard hdiutil
              if hdiutil create -volname "LunaGram" -srcfolder "$temp_dir" -ov -format UDZO "dist/$dmg_name" 2>/dev/null; then
                echo "✅ Created $dmg_name (method 1)"
                dmg_created=true
              else
                echo "Method 1 failed, trying method 2..."
                sleep 1
                
                # Try method 2: Just the app without Applications link
                if hdiutil create -volname "LunaGram" -srcfolder "$app_path" -ov -format UDZO "dist/$dmg_name" 2>/dev/null; then
                  echo "✅ Created $dmg_name (method 2 - app only)"
                  dmg_created=true
                else
                  echo "Method 2 failed, trying method 3..."
                  sleep 1
                  
                  # Try method 3: Use a different temp location
                  temp_dir2="/tmp/lunagram_build_$(date +%s)"
                  mkdir -p "$temp_dir2"
                  cp -R "$app_path" "$temp_dir2/"
                  
                  if hdiutil create -volname "LunaGram" -srcfolder "$temp_dir2" -ov -format UDZO "dist/$dmg_name" 2>/dev/null; then
                    echo "✅ Created $dmg_name (method 3 - different temp)"
                    dmg_created=true
                  else
                    echo "❌ All DMG creation methods failed for $dmg_name"
                  fi
                  
                  rm -rf "$temp_dir2" 2>/dev/null || true
                fi
              fi
              
              rm -rf "$temp_dir" 2>/dev/null || true
              
              if [ "$dmg_created" = false ]; then
                echo "⚠️  DMG creation failed, but ZIP and .app files are available"
              fi
              
              # Additional cleanup after each DMG attempt
              sleep 1
              sudo diskutil list | grep "LunaGram" | awk '{print $6}' | xargs -I {} sudo diskutil unmount {} 2>/dev/null || true
              
            else
              echo "❌ No app found at: $app_path"
            fi
          else
            echo "❌ Directory not found: $mac_dir"
          fi
        done
        
        echo "Final files created:"
        echo "DMG files:"
        ls -la dist/*.dmg 2>/dev/null || echo "No DMG files created"
        echo "ZIP files:"
        ls -la dist/*.zip 2>/dev/null || echo "No ZIP files created"
        echo "APP files:"
        ls -la dist/*.app 2>/dev/null || echo "No APP files created"
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: LunaGram-${{ github.event.inputs.version }}-builds
        path: |
          dist/*.dmg
          dist/*.zip
          dist/*.app
        retention-days: 30
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: LunaGram ${{ github.event.inputs.version }}
        body: |
          ## 🚀 LunaGram ${{ github.event.inputs.version }}
          
          ### 📥 Installation
          
          **Recommended**: Download the `.dmg` file below for the fastest installation experience.
          
          ### 📦 Downloads
          - **Intel Macs**: `LunaGram-${{ github.event.inputs.version }}.dmg`
          - **Apple Silicon Macs**: `LunaGram-${{ github.event.inputs.version }}-arm64.dmg`
          - **Universal ZIP**: `LunaGram-${{ github.event.inputs.version }}-mac.zip`
          - **Standalone Apps**: `LunaGram-${{ github.event.inputs.version }}.app` / `LunaGram-${{ github.event.inputs.version }}-arm64.app`
          
          ### 🔧 Installation Instructions
          1. Download the appropriate `.dmg` file for your Mac
          2. Open the `.dmg` file
          3. Drag LunaGram to your Applications folder
          4. Launch LunaGram from Applications
          
          **First launch**: Right-click → Open (for security approval)
          
          ### ✨ Features
          - Native Instagram experience for macOS
          - Fast startup with automatic optimizations
          - Universal binary (Intel + Apple Silicon)
          - Persistent login
          - Deep link support
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}
        files: |
          dist/LunaGram-1.0.0.dmg
          dist/LunaGram-1.0.0-arm64.dmg
          dist/LunaGram-1.0.0-mac.zip
          dist/LunaGram-1.0.0-arm64-mac.zip
          dist/LunaGram-1.0.0.app
          dist/LunaGram-1.0.0-arm64.app
        fail_on_unmatched_files: false