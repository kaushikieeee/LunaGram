name: Build and Release LunaGram

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build app
      run: npm run build
      env:
        CSC_IDENTITY_AUTO_DISCOVERY: false
        
    - name: Create DMGs with simple approach
      run: |
        echo "Creating DMGs from built apps..."
        
        # Force cleanup any mounted volumes first
        hdiutil info 2>/dev/null | grep "/dev/disk" | awk '{print $1}' | xargs -I {} hdiutil detach {} -force 2>/dev/null || true
        
        # Create DMGs for each architecture
        for mac_dir in dist/mac*; do
          if [ -d "$mac_dir" ]; then
            app_path="$mac_dir/LunaGram.app"
            
            if [ -d "$app_path" ]; then
              # Determine architecture suffix
              if [[ "$mac_dir" == *"arm64"* ]]; then
                arch_suffix="-arm64"
              else
                arch_suffix=""
              fi
              
              dmg_name="LunaGram-1.0.0${arch_suffix}.dmg"
              echo "Creating $dmg_name..."
              
              # Create installer folder with app and Applications link
              temp_dir=$(mktemp -d)
              cp -R "$app_path" "$temp_dir/"
              ln -s /Applications "$temp_dir/Applications"
              
              # Create DMG using the most basic method
              if hdiutil create -volname "LunaGram" -srcfolder "$temp_dir" -ov -format UDZO "dist/$dmg_name" 2>/dev/null; then
                echo "✅ Created $dmg_name"
              else
                echo "❌ Failed to create $dmg_name, trying alternative..."
                # Fallback: just the app without Applications link
                hdiutil create -volname "LunaGram" -srcfolder "$app_path" -ov -format UDZO "dist/$dmg_name" 2>/dev/null || echo "❌ All methods failed for $dmg_name"
              fi
              
              rm -rf "$temp_dir"
            fi
          fi
        done
        
        echo "Final files:"
        ls -la dist/*.dmg 2>/dev/null || echo "No DMG files created"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version }}
        name: LunaGram ${{ github.event.inputs.version }}
        body: |
          ## 🚀 LunaGram ${{ github.event.inputs.version }}
          
          ### 📥 Installation
          
          **Download the `.dmg` file for your Mac:**
          - **Intel Macs**: `LunaGram-${{ github.event.inputs.version }}.dmg`
          - **Apple Silicon Macs**: `LunaGram-${{ github.event.inputs.version }}-arm64.dmg`
          
          ### 🔧 Installation Instructions
          1. Download the appropriate `.dmg` file for your Mac
          2. Open the `.dmg` file
          3. Drag LunaGram to your Applications folder
          4. Launch LunaGram from Applications
          
          **First launch**: Right-click → Open (for security approval)
          
          💡 **"Disk is damaged" error?** Run: `xattr -c ~/Downloads/LunaGram-*.dmg`
          
          ### ✨ Features
          - Native Instagram experience for macOS
          - Fast startup with automatic optimizations
          - Universal binary (Intel + Apple Silicon)
          - Persistent login
          - Deep link support
        draft: false
        prerelease: false
        files: |
          dist/*.dmg